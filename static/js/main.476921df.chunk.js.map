{"version":3,"sources":["Email.jsx","App.js","serviceWorker.js","index.js"],"names":["Email","src","defaultSrc","children","useLDflexValue","href","startsWith","App","state","profile","renderProfile","this","setState","htmlFor","id","value","onChange","e","target","onClick","viewProfile","Image","className","Value","List","friend","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gBAIe,SAASA,EAAT,GAAgE,IAA/CC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,WAAyC,IAA7BC,gBAA6B,MAAlB,KAAkB,iDAC5EF,EAAMG,YAAeH,IAAQC,EAC7B,IAAIG,EAAO,UAAGJ,GAAMK,WAAW,WAAaL,EAAjC,iBAAiDA,GAC5D,OAAOA,EAAM,uBAAGI,KAAI,UAAKA,IAAZ,UAAwBJ,IAAaE,E,ICwDrCI,E,2MAxDbC,MAAQ,CACNC,QAAS,GACTC,eAAe,G,2EAGLD,GACVE,KAAKC,SAAS,CAAEH,QAASA,EAASC,eAAe,M,+BAGzC,IAAD,SAC4BC,KAAKH,MAAhCC,EADD,EACCA,QAASC,EADV,EACUA,cACjB,OACE,6BACE,8CACA,2BACE,2BAAOG,QAAQ,WAAf,YACA,2BAAOC,GAAG,UAAUC,MAAON,EAASO,SAAU,SAAAC,GAAC,OAAI,EAAKL,SAAS,CAAEH,QAASQ,EAAEC,OAAOH,WACrF,4BAAQI,QAAS,kBAAM,EAAKC,YAAYX,KAAxC,SAEDC,GACC,6BACE,2BACE,kBAACW,EAAA,EAAD,CAAOC,UAAU,cAAcrB,IAAG,WAAMQ,EAAN,iBAClC,6BACA,2BAAOI,QAAQ,QAAf,UACA,0BAAMC,GAAG,QACP,kBAACS,EAAA,EAAD,CAAOtB,IAAG,WAAMQ,EAAN,mBAEZ,6BACA,2BAAOI,QAAQ,SAAf,WACA,0BAAMC,GAAG,SACP,kBAACd,EAAD,CAAOC,IAAG,WAAMQ,EAAN,mBAEZ,6BACA,2BAAOI,QAAQ,WAAf,cAEF,kBAACW,EAAA,EAAD,CAAMvB,IAAG,WAAMQ,EAAN,mBAA+B,SAAAgB,GAAM,OAC5C,wBAAIC,IAAKD,GACP,kBAACJ,EAAA,EAAD,CAAOC,UAAU,cAAcrB,IAAG,WAAMwB,EAAN,iBAClC,6BACA,yCACA,4BAAQN,QAAS,kBAAM,EAAKC,YAAYK,KACtC,kBAACF,EAAA,EAAD,CAAOtB,IAAG,WAAMwB,EAAN,WAAV,UAAoCA,KAEtC,6BACA,0CACA,kBAACzB,EAAD,CAAOC,IAAG,WAAMwB,EAAN,4B,GAhDRE,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.476921df.chunk.js","sourcesContent":["import React from 'react';\nimport { useLDflexValue } from '@solid/react';\n\n/** Displays an anchor with proper email reference. */\nexport default function Email({ src, defaultSrc, children = null, ...props }) {\n  src = useLDflexValue(src) || defaultSrc;\n  let href = `${src}`.startsWith('mailto:') ? src : `mailto:${src}`;\n  return src ? <a href={`${href}`}>{`${src}`}</a> : children;\n}","import React from 'react';\nimport './App.css';\nimport { Value, Image, List } from '@solid/react';\nimport Email from './Email';\n\nclass App extends React.Component {\n\n  state = {\n    profile: '',\n    renderProfile: false\n  };\n\n  viewProfile(profile) {\n    this.setState({ profile: profile, renderProfile: true });\n  }\n\n  render() {\n    const { profile, renderProfile } = this.state;\n    return (\n      <div>\n        <h1>Profile viewer</h1>\n        <p>\n          <label htmlFor=\"profile\">Profile:</label>\n          <input id=\"profile\" value={profile} onChange={e => this.setState({ profile: e.target.value })} />\n          <button onClick={() => this.viewProfile(profile)}>View</button>\n        </p>\n        {renderProfile &&\n          <div>\n            <p>\n              <Image className=\"profile-img\" src={`[${profile}][foaf:img]`} />\n              <br />\n              <label htmlFor=\"name\">Name: </label>\n              <span id=\"name\">\n                <Value src={`[${profile}][foaf:name]`} />\n              </span>\n              <br />\n              <label htmlFor=\"email\">Email: </label>\n              <span id=\"email\">\n                <Email src={`[${profile}][foaf:mbox]`} />\n              </span>\n              <br />\n              <label htmlFor=\"friends\">Friends: </label>\n            </p>\n            <List src={`[${profile}][foaf:knows]`}>{friend =>\n              <li key={friend}>\n                <Image className=\"profile-img\" src={`[${friend}][foaf:img]`} />\n                <br />\n                <label>Name: </label>\n                <button onClick={() => this.viewProfile(friend)}>\n                  <Value src={`[${friend}].name`}>{`${friend}`}</Value>\n                </button>\n                <br />\n                <label>Email: </label>\n                <Email src={`[${friend}][foaf:mbox]`} />\n              </li>}\n            </List>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}